[
  {
    "id": 1,
    "question": "What is an access token and refresh token? How do they work and where should we store them on the client-side?",
    "answer": "An access token and refresh token are commonly used in authentication systems. An access token is a credential that is issued to a client application after successful authentication. It grants the application access to specific resources on behalf of a user. Access tokens typically have a limited lifespan and are used to authenticate and authorize subsequent API requests.On the other hand, a refresh token is a long-lived credential that is used to obtain a new access token when the current one expires. Refresh tokens are issued alongside access tokens and can be used to request a new access token without requiring the user to reauthenticate.To ensure security, access tokens and refresh tokens should be securely stored on the client-side. Storing them in a secure manner helps prevent unauthorized access and misuse. Common practices for storing tokens on the client-side include using secure cookies, local storage, or secure storage mechanisms provided by the operating system or framework."
  },
  {
    "id": 2,
    "question": "Compare SQL and NoSQL databases?",
    "answer": "SQL and NoSQL databases are two different types of database management systems that serve different purposes.SQL databases, also known as relational databases, are structured and based on a fixed schema. They use SQL (Structured Query Language) for defining and manipulating data. SQL databases excel in handling complex relationships between data and ensuring data integrity through ACID (Atomicity, Consistency, Isolation, Durability) properties. They are well-suited for applications that require structured data and complex querying.On the other hand, NoSQL databases, also known as non-relational databases, are schema-less and offer more flexibility in handling unstructured or semi-structured data. They employ a variety of data models, such as key-value, document, columnar, or graph, to store and retrieve data. NoSQL databases are horizontally scalable, meaning they can handle large amounts of data and high traffic loads. They are often used in modern web applications, big data processing, and scenarios where flexibility and scalability are crucial.In summary, SQL databases are a good fit for applications with structured data and complex relationships, while NoSQL databases are better suited for applications with unstructured or semi-structured data that require scalability and flexibility."
  },

  {
    "id": 3,
    "question": "What is Express.js? What is Nest.js",
    "answer": "Express.js is a fast and minimalist web application framework for Node.js. It provides a robust set of features for building web applications and APIs. Express.js simplifies the process of handling HTTP requests, routing, middleware integration, and managing server-side logic. It is known for its simplicity, flexibility, and extensive ecosystem of middleware and extensions. With Express.js, developers can quickly create scalable and efficient web applications using JavaScript on the server-side. Nest.js is a progressive, extensible, and TypeScript-based web application framework. It is built on top of Express.js and provides an additional layer of structure and features inspired by Angular. Nest.js follows the architectural pattern of modules, controllers, and services, making it suitable for building complex and scalable applications. It supports dependency injection, declarative programming, and offers a powerful command-line interface (CLI) for scaffolding and managing projects. Nest.js is widely used in the development of server-side applications, microservices, and APIs using TypeScript and JavaScript."
  },
  {
    "id": 4,
    "question": "What is MongoDB aggregate and how does it work?",
    "answer": "In MongoDB, the aggregate function is used for performing advanced data analysis and processing operations on collections of documents. It allows you to perform complex queries, transformations, and aggregations on the data stored in MongoDB.The aggregate function in MongoDB works by processing a collection of documents through a pipeline of stages. Each stage performs a specific operation on the data, and the output of one stage serves as the input for the next stage. The pipeline stages can include operations like filtering, sorting, grouping, projecting, joining, and performing mathematical computations.The aggregate function provides a powerful and flexible way to aggregate and analyze data in MongoDB. It supports a wide range of operations and operators, including $match, $group, $sort, $project, $limit, $skip, $lookup, and many more. By combining and chaining these stages, you can construct complex queries and obtain meaningful insights from your data.Overall, the aggregate function in MongoDB is a versatile tool for performing advanced data analysis and aggregation tasks on collections of documents, allowing you to extract valuable information and gain deeper insights into your data."
  }
]
